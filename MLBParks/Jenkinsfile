// Jenkinsfile for NationalParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `Nationalparks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance
    def projectFolder="./MLBParks"
    def name="mlbparks"
    def targetFile="${name}.war"
    stage("Build"){
      checkout scm
      sh "mvn -s nexus_settings.xml -f ${projectFolder} clean package -DskipTests=true"
    }
    stage("Unit Test"){
      sh "mvn -s nexus_settings.xml -f ${projectFolder} test "
    }
    stage('Code Analysis') {
      echo "Running Code Analysis"
      sh "mvn -s nexus_settings.xml -f ${projectFolder} sonar:sonar -Dsonar.host.url=http://sonarqube-kxiang-sonarqube.apps.na39.openshift.opentlc.com"
    }

    stage('Publish to Nexus') {
      echo "Publish to Nexus"
      sh "mvn -s nexus_settings.xml deploy -f ${projectFolder} -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3-kxiang-nexus.apps.na39.openshift.opentlc.com/repository/releases"
    }
    def jarPath="${projectFolder}/target/${targetFile}"
    def pomPath="${projectFolder}/pom.xml"
    def groupId    = getGroupIdFromPom(pomPath)
    def artifactId = getArtifactIdFromPom(pomPath)
    def version    = getVersionFromPom(pomPath)
    def devTag  = "${version}-${BUILD_NUMBER}"
    def prodTag = "${version}"  
    stage("Deploy Dev"){
      sh "oc start-build ${name} --from-file=${jarPath} -F -n kxiang-parks-dev"
      sh "oc tag kxiang-parks-dev/${name}:latest kxiang-parks-dev/${name}:${devTag} -n kxiang-parks-dev"
      sh "oc set image dc/${name} ${name}=${name}:${devTag} --source=istag -n kxiang-parks-dev"
      sh "oc rollout latest ${name} -n kxiang-parks-dev"
    }
    stage("After Deploy Dev"){
      echo "Wait dev build finish to release resources"
      sh " ./Infrastructure/bin/waitPodReady.sh ${name} kxiang-parks-dev"
      echo "Copy image to Nexus Docker Registry"
      def token=readFile ('/var/run/secrets/kubernetes.io/serviceaccount/token')
      sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds=default:${token} --dest-creds=admin:admin123 docker://docker-registry-default.apps.${CLUSTER}/kxiang-parks-dev/${name}:${devTag} docker://nexus-registry-kxiang-nexus.apps.muc.example.opentlc.com/kxiang-parks/dev/${name}:${devTag}"
    }
    
     def curTarget 
     def destTarget
     def isGreen
    stage("Deploy Prod"){
      echo "Detecting current target"
      curTarget = sh returnStdout: true, script:"oc get svc/${name} -n kxiang-parks-prod --template=\"{{.spec.selector.deploymentconfig}}\""
      echo "Current pointing target: ${curTarget}"
      isGreen=curTarget.contains("blue")
      destTarget= isGreen?"${name}-green":"${name}-blue"
      echo "Deploy to target: ${destTarget}"
      sh "oc tag kxiang-parks-dev/${name}:${devTag} kxiang-parks-prod/${name}:${prodTag} -n kxiang-parks-prod"
      sh "oc set image dc/${destTarget} ${name}=${name}:${prodTag} --source=istag -n kxiang-parks-prod"
      sh "oc rollout latest ${destTarget} -n kxiang-parks-prod"
    }
    stage("Before Swap B/G"){
      echo "Wait pods readiness "
      sh " ./Infrastructure/bin/waitPodReady.sh ${name} kxiang-parks-dev"
      sh " ./Infrastructure/bin/waitPodReady.sh ${destTarget} kxiang-parks-prod"
    }
    stage("Swap B/G deployment"){
      sh "oc patch svc/${name} -n kxiang-parks-prod -p '{\"spec\":{\"selector\":{\"deploymentconfig\":\"${destTarget}\"}}}' "
    }
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
